import asyncio
import json
import os
from flask_cors import CORS
import sys
import platform
import pdfplumber
from flask import Flask, request, jsonify
from g4f.client import Client

if os.name == "nt":
    from asyncio import WindowsSelectorEventLoopPolicy
    asyncio.set_event_loop_policy(WindowsSelectorEventLoopPolicy())

client = Client()

app = Flask(__name__)


instruction = """
B·∫°n l√† tr·ª£ l√Ω AI ƒë·∫°i di·ªán cho Joynest, ƒë√≥ng vai tr√≤ l√† m·ªôt **c·ªë v·∫•n h·ªçc t·∫≠p** h·ªó tr·ª£ h·ªçc sinh ti·ªÉu h·ªçc trong qu√° tr√¨nh r√®n luy·ªán v√† ph√°t tri·ªÉn k·ªπ nƒÉng **c√¥ng d√¢n s·ªë**.

# 1. Vai tr√≤ ch√≠nh:
- Cung c·∫•p th√¥ng tin **ch√≠nh x√°c**, **d·ªÖ hi·ªÉu** v√† **ƒë√°ng tin c·∫≠y** v·ªÅ:
  - B·∫£o v·ªá th√¥ng tin c√° nh√¢n khi d√πng m·∫°ng
  - ·ª®ng x·ª≠ vƒÉn minh, an to√†n tr√™n m√¥i tr∆∞·ªùng s·ªë
  - C√°ch ph√¢n bi·ªát th√¥ng tin th·∫≠t ‚Äì gi·∫£
  - T√¥n tr·ªçng b·∫£n quy·ªÅn v√† ng∆∞·ªùi kh√°c khi s·ª≠ d·ª•ng n·ªôi dung tr√™n m·∫°ng
- **Tuy·ªát ƒë·ªëi kh√¥ng t·ª± t·∫°o th√¥ng tin** n·∫øu n·ªôi dung kh√¥ng c√≥ trong t√†i li·ªáu ƒë√£ x√°c th·ª±c.
- N·∫øu kh√¥ng c√≥ th√¥ng tin ph√π h·ª£p, h√£y tr·∫£ l·ªùi:
  > "Hi·ªán t·∫°i m√¨nh ch∆∞a c√≥ th√¥ng tin v·ªÅ ƒëi·ªÅu n√†y, b·∫°n nh·ªè c√≥ th·ªÉ n√≥i r√µ h∆°n ƒë∆∞·ª£c kh√¥ng? M√¨nh s·∫Ω c·ªë g·∫Øng gi√∫p b·∫°n t√¨m hi·ªÉu nh√©!"

# 2. Phong c√°ch giao ti·∫øp:
- Gi·ªçng ƒëi·ªáu: **Th√¢n thi·ªán**, **g·∫ßn g≈©i**, **ng·∫Øn g·ªçn**, **ph√π h·ª£p v·ªõi h·ªçc sinh ti·ªÉu h·ªçc**
- X∆∞ng h√¥: G·ªçi ng∆∞·ªùi d√πng l√† "**b·∫°n nh·ªè**", x∆∞ng l√† "**m√¨nh**" ho·∫∑c "**tr·ª£ l√Ω h·ªçc t·∫≠p**"
- Tr√°nh d√πng t·ª´ ng·ªØ ph·ª©c t·∫°p; n·∫øu bu·ªôc ph·∫£i d√πng, c·∫ßn **gi·∫£i th√≠ch ƒë∆°n gi·∫£n, d·ªÖ hi·ªÉu**

# 3. Nguy√™n t·∫Øc x·ª≠ l√Ω c√¢u h·ªèi:
- N·∫øu c√¢u h·ªèi **r√µ r√†ng** v√† **n·∫±m trong n·ªôi dung k·ªπ nƒÉng c√¥ng d√¢n s·ªë** ‚Üí Tr·∫£ l·ªùi ch√≠nh x√°c theo n·ªôi dung ƒë√£ cung c·∫•p
- N·∫øu c√¢u h·ªèi **ch∆∞a r√µ nghƒ©a** ‚Üí H·ªèi l·∫°i ƒë·ªÉ l√†m r√µ:
  > "B·∫°n nh·ªè ƒëang mu·ªën h·ªèi ƒëi·ªÅu g√¨ v·∫≠y? B·∫°n c√≥ th·ªÉ n√≥i c·ª• th·ªÉ h∆°n kh√¥ng ƒë·ªÉ m√¨nh gi√∫p t·ªët h∆°n nh√©!"
- N·∫øu c√¢u h·ªèi **v∆∞·ª£t ngo√†i n·ªôi dung k·ªπ nƒÉng c√¥ng d√¢n s·ªë** ‚Üí G·ª£i √Ω b·∫°n nh·ªè h·ªèi th·∫ßy c√¥ ho·∫∑c ng∆∞·ªùi l·ªõn:
  > "C√¢u n√†y h∆°i kh√≥ r·ªìi, b·∫°n nh·ªè th·ª≠ h·ªèi th·∫ßy c√¥ ho·∫∑c b·ªë m·∫π xem sao nh√©. M√¨nh s·∫Ω lu√¥n s·∫µn s√†ng gi√∫p khi b·∫°n c·∫ßn h·ªçc k·ªπ nƒÉng c√¥ng d√¢n s·ªë!"

# 4. M·ª•c ti√™u c·ªßa b·∫°n:
- H·ªó tr·ª£ h·ªçc sinh **hi·ªÉu v√† th·ª±c h√†nh ƒë√∫ng k·ªπ nƒÉng c√¥ng d√¢n s·ªë**
- Gi√∫p c√°c b·∫°n nh·ªè **t·ª± tin, an to√†n v√† c√≥ tr√°ch nhi·ªám** khi tham gia v√†o m√¥i tr∆∞·ªùng s·ªë
- ƒê·ªìng h√†nh c√πng h·ªçc sinh trong h√†nh tr√¨nh tr·ªü th√†nh **c√¥ng d√¢n s·ªë th√¥ng minh v√† t·ª≠ t·∫ø**
"""

def read_json(file_path):
    with open(file_path, "r", encoding="utf-8") as file:
        return json.load(file)

def read_pdf(file_path):
    try:
        with pdfplumber.open(file_path) as pdf:
            text = ""
            for page in pdf.pages:
                text += page.extract_text() + "\n"
            return text
    except Exception as e:
        return f"L·ªói khi ƒë·ªçc file PDF: {str(e)}"


def save_chat_history(question, answer, file_path="chat_history.json"):
    try:
        history = []
        if os.path.exists(file_path):
            with open(file_path, "r", encoding="utf-8") as f:
                history = json.load(f)
        history.append({"question": question, "answer": answer})
        with open(file_path, "w", encoding="utf-8") as f:
            json.dump(history, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print("L·ªói khi l∆∞u l·ªãch s·ª≠:", e)

def load_chat_history(file_path="chat_history.json"):
    if os.path.exists(file_path):
        with open(file_path, "r", encoding="utf-8") as f:
            return [(item["question"], item["answer"]) for item in json.load(f)]
    return []

def answer_with_related_files(question, file_dict):
    for keyword in file_dict:
        if keyword.lower() in question.lower():
            file_list = file_dict[keyword]
            file_links = []
            for file in file_list:
                if isinstance(file, dict) and 'name' in file and 'path' in file:
                    file_links.append({
                        "name": file['name'],
                        "url": file['path'] 
                    })
            return file_links
    return None


context_history = load_chat_history()

def generate_response(question, json_data):
    try:
        context = json.dumps(json_data, ensure_ascii=False, indent=2)
        context_prompt = "\n".join([f"C√¢u h·ªèi: {q}\nTr·∫£ l·ªùi: {a}" for q, a in context_history])

        prompt = f"{instruction}\n\nD·ªØ li·ªáu t·ª´ h·ªá th·ªëng:\n{context}\n\n{context_prompt}\n\nC√¢u h·ªèi: {question}\nTr·∫£ l·ªùi:"

        response = client.chat.completions.create(
            # model="gpt-3.5-turbo",
            model="gpt-4o-mini", 
            messages=[{"role": "user", "content": prompt}],
            temperature=0.3
        )

        print("RESPONSE:", response)  # ‚úÖ Th√™m log

        if not response.choices:
            return "Hi·ªán t·∫°i m√¨nh ch∆∞a nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ h·ªá th·ªëng. B·∫°n nh·ªè th·ª≠ h·ªèi l·∫°i m·ªôt c√¢u kh√°c nh√©!"

        answer = response.choices[0].message.content.strip()
        
        if "T√¥i ch∆∞a c√≥ th√¥ng tin" in answer or len(answer) < 5:
            return "Hi·ªán t·∫°i t√¥i ch∆∞a c√≥ th√¥ng tin v·ªÅ v·∫•n ƒë·ªÅ n√†y, b·∫°n c√≥ th·ªÉ cung c·∫•p th√™m th√¥ng tin v·ªÅ n·ªôi dung b·∫°n quan t√¢m kh√¥ng, m√¨nh s·∫Ω gi√∫p b·∫°n t√¨m ki·∫øm th√™m nh√©."
        
        context_history.append((question, answer))
        return answer

    except Exception as e:
        return f"L·ªói trong qu√° tr√¨nh x·ª≠ l√Ω: {str(e)}"


@app.route("/")
def index():
    return "API tr·ª£ l√Ω c√¥ng d√¢n s·ªë ƒëang ch·∫°y.", 200

@app.route('/ask', methods=['POST'])
def ask():
    data = request.json
    question = data.get('question')
    
    if not question:
        return jsonify({"error": "Kh√¥ng nh·∫≠n ƒë∆∞·ª£c c√¢u h·ªèi."}), 400

    pdf_file_path = "DOL.pdf"
    pdf_text = read_pdf(pdf_file_path)

    file_dict_path = "Data2_file.json"  
    file_dict = read_json(file_dict_path)

    answer = generate_response(question, pdf_text)
    save_chat_history(question, answer)

    file_response = answer_with_related_files(question, file_dict)
    if file_response:
        html_links = "<br>".join(
            [f'üìò <a href="{f["url"]}" target="_blank">{f["name"]}</a>' for f in file_response]
        )
        answer += f"\n\nüìé D∆∞·ªõi ƒë√¢y l√† t√†i li·ªáu li√™n quan b·∫°n c√≥ th·ªÉ tham kh·∫£o:\n{html_links}"

    return jsonify({"answer": answer})


if __name__ == "__main__":
    app.run(host='0.0.0.0', port=5000)
    